<!DOCTYPE html
  PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html>

<head>
  <meta content="text/html; charset=UTF-8" http-equiv="Content-Type" />
  <link rel="shortcut icon" href="/favicon/favicon.ico" />

  <meta content="initial-scale=1.0" name="viewport" />
  <meta charset="utf-8" />
</head>

<body>
  <div id="js-loader" class="loader">
    <div class="cv-spinner">
      <span class="spinner"></span>
      <h1 class="loader_message">この処理には時間がかかります</h1>
    </div>
  </div>
  <header>
    <nav id="header_nav" class="justify-content-around navbar-dark mx-auto">
      <%= link_to about_path, target:'_blank' do %>
      <%= image_tag '/shugo.png', alt: 'shugo icon', id: 'header_icon' %>
      <% end %>
      <button type="button" id='get_geolocation_btn' class="hd_btn my-1 my-sm-0">現在地</button>
      <button type="button" id='get_center_btn' class="hd_btn my-1 my-sm-0">地図の中心</button>
      <div class="form-inline" name='geocode'>
        <input class="mr-sm-2 bg-light" type="textbox" id="address" placeholder="地点名">
        <input type="button" id="geocode_btn" class="hd_btn my-2 my-sm-0" value="Search">
      </div>
      <div id="accordion" class="submenu-container">
        <div class="submenu">
          <input class="my-1 bg-light" type="textbox" id="drink_serch" placeholder="ドリンク名(必須)">
          <div class="selectbox sel_num mx-2">
            <select name="件数" id="select_num">
              <option value="20" hidden>取得件数</option>
              <option value="20">20件</option>
              <option value="40">40件</option>
              <option value="60">60件</option>
            </select>
          </div>
        </div>
      </div>
    </nav>
  </header>

  <main>
    <div id="wrap">
      <div id="map"></div>
      <div id="menu">
        <div class="toggle-buttons">
          <input id="item-1" class="radio-inline__input" type="radio" name="accessible-radio" value="item-1"
            checked="checked" onclick="sortByDistance()" />
          <label class="radio-inline__label" for="item-1">
            近い順
          </label>
          <input id="item-2" class="radio-inline__input" type="radio" name="accessible-radio" value="item-2"
            onclick="sortByPrice()" />
          <label class="radio-inline__label" for="item-2">
            安い順
          </label>
        </div>
        <div id="shops_wraper"></div>
        <div class="menu_footer footer_smartphone">
          <p class="footer_message">実際の場所、商品、値段と違う場合がございます。</p>
        </div>
      </div>
    </div>
    <div class="menu_footer footer_pc">
      <p class="footer_message">実際の場所、商品、値段と違う場合がございます。</p>
    </div>
  </main>
  <div class="a_tag_image">
    <%= link_to beer_path, target:'_blank' do %>
    <%= image_tag '/beer_atag.png', class: 'path_icon' %>
    <% end %>
  </div>
  <script>
    let map
    let mapCounter = 0
    let geocoder = null
    let marker = []
    let infoWindow = []
    let markerData = []
    let markerNum = null
    let markerLocation = null
    let mapOptions = {}
    let mapStyles = []
    let list = []
    let serchWord
    let shopNum = null
    let mapWindow = document.getElementById('map')
    let menuSidebar = document.getElementById('menu')
    let shopsWraper = document.getElementById('shops_wraper')
    let jobWatcher = null

    function initMap() {
      if (mapCounter == 0) {
        geocoder = new google.maps.Geocoder()

        mapStyles = [{
            "featureType": "administrative.land_parcel",
            "elementType": "labels",
            "stylers": [{
              "visibility": "off"
            }]
          },
          {
            "featureType": "poi",
            "elementType": "labels.text",
            "stylers": [{
              "visibility": "off"
            }]
          },
          {
            "featureType": "poi.business",
            "stylers": [{
              "visibility": "off"
            }]
          },
          {
            "featureType": "poi.park",
            "elementType": "labels.text",
            "stylers": [{
              "visibility": "off"
            }]
          },
          {
            "featureType": "road.local",
            "elementType": "labels",
            "stylers": [{
              "visibility": "off"
            }]
          }
        ]

        mapOptions = {
          disableDefaultUI: true,
          zoom: 17, // 拡大倍率
          center: {
            lat: 35.7299504,
            lng: 139.7000289,
          }, // 緯度・経度
          styles: mapStyles
        };


        map = new google.maps.Map(
          mapWindow,
          mapOptions
        );
      }
    }

    function checkSerchForm() {
      serchWord = document.getElementById("drink_serch").value;
      if (serchWord.length < 1) {
        alert('ドリンク名を入力してください')
        return false
      } else if (serchWord.includes(' ') || serchWord.includes('　')) {
        alert('ドリンク名に空白は含まないでください')
        return false
      } else {
        return true
      }
    }

    function showMenu() {
      if (window.matchMedia("(max-width: 779px)").matches) {
        mapWindow.style.height = '50%';
      } else {
        mapWindow.style.width = '70%'
      }
      menuSidebar.style.display = 'block';
    }

    function getDrinkGenres() {
      let genreElement = document.beer_form.beer_items
      genre_array = []
      for (let i = 0; i < genreElement.length; i++) {
        if (genreElement[i].checked) {
          genre_array.push(parseInt(genreElement[i].value));
        }
      }
    }

    function getShopNum() {
      let shopElement = document.getElementById("select_num")
      shopNum = shopElement.value
    }

    function eraseshopsWraper() {
      if (document.getElementsByClassName('shop_list').length > 0) {
        while (shopsWraper.firstChild) shopsWraper.removeChild(shopsWraper.firstChild);
      }
    }

    function fetchApi(lat, lng) {
      serchWord = document.getElementById("drink_serch").value;
      getShopNum()
      $('#js-loader').fadeIn('slow')
      jobWatcher += serchWord

      let prm = {
        now_lat: lat,
        now_lng: lng,
        serch_word: serchWord,
        shop_num: shopNum,
        job: jobWatcher
      };

      fetch('/fetch_drinks', {
        method: "POST",
        body: JSON.stringify(prm),
        headers: {
          'Content-Type': 'application/json'
        }
      }).then(function (response) {
        $('#js-loader').fadeOut(400);
        return response.json()
      }).then(function (shops) {
        showMenu()
        markerData = shops
        deleteMarkers(markerNum)
        dropMarker(markerData)
        $('#item-1').trigger("click")
      }).catch(function (ex) {
        console.log('parsing failed', ex)
      })
    }

    function dropMarker(markerData) {
      eraseshopsWraper()
      for (let i = 0; i < Object.keys(markerData).length; i++) {
        markerLatLng = new google.maps.LatLng({
          lat: parseFloat(markerData[i].shop_lat),
          lng: parseFloat(markerData[i].shop_lng)
        });
        let shopDom = ''
        let drinkDom = ''
        let distanceDom = ''
        let addressDom = ''
        let listDom = ''

        shopDom =
          `<div class="info_window"><a href="https://www.hotpepper.jp${markerData[i].shop_url}" target="_blank"> ${markerData[i].shop_name} </a></div>`

        for (let v = 0; v < markerData[i].drinks.length; v++) {
          drinkDom = drinkDom + `<div class="info_window"><a href="https://www.hotpepper.jp${markerData[i].shop_url}drink/"
              target="_blank"> ${markerData[i].drinks[v][0]}: ${markerData[i].drinks[v][1]}円 </a></div>`
        }

        if (markerData[i].distance < 1) {
          let distanceForMetre = markerData[i].distance * 100
          distanceForMetre = Math.round(distanceForMetre) * 10
          distanceDom = `<div class="info_window"><a href="http://maps.apple.com/?q=${markerData[i].shop_lat},${markerData[i].shop_lng}">
              ${distanceForMetre}m </a></div>`
        } else {
          let distanceForKilo = markerData[i].distance * 10
          distanceForKilo = Math.round(distanceForKilo) / 10
          distanceDom = `<div class="info_window"><a href="http://maps.apple.com/?q=${markerData[i].shop_lat},${markerData[i].shop_lng}">
              ${distanceForKilo}km </a></div>`
        }
        listDom = `<div id="list${i}" class='shop_container'><li class=' shop_list'> ${shopDom} ${drinkDom} ${addressDom} ${distanceDom}
          </li>
        </div>`
        marker[i] = new google.maps.Marker({ // マーカーの追加
          position: markerLatLng, // マーカーを立てる位置を指定
          animation: google.maps.Animation.DROP,
          map: map, // マーカーを立てる地図を指定
          icon: 'beer.png'
        });
        infoWindow[i] = new google.maps.InfoWindow({
          content: shopDom + drinkDom + distanceDom
        });
        $("#shops_wraper").append(listDom)
        list[i] = document.getElementById(`list${i}`)

        markerEvent(i);
        listEvent(i);
        markerNum = i
      }
    }

    function markerEvent(i) {
      marker[i].addListener('click', function () {
        markerLatLng = new google.maps.LatLng({
          lat: parseFloat(markerData[i].shop_lat),
          lng: parseFloat(markerData[i].shop_lng)
        });
        map.setCenter(markerLatLng)
        infoWindow[i].open(map, marker[i]);
      });
    }

    function listEvent(i) {
      list[i].addEventListener('click', function () {
        markerLatLng = new google.maps.LatLng({
          lat: parseFloat(markerData[i].shop_lat),
          lng: parseFloat(markerData[i].shop_lng)
        });
        map.setCenter(markerLatLng)
        infoWindow[i].open(map, marker[i]);
      })
    }

    function deleteMarkers(markerNum) {
      if (markerNum != null)
        for (let i = 0; i <= markerNum; i++) {
          if (marker[i] != null) marker[i].setMap(null);
        }
      marker = [];
    }

    function deleteMarkerLocation() {
      if (markerLocation != null) markerLocation.setMap(null);
      markerLocation = null;
    }

    function sortByPrice() {
      let priceList = []
      for (let i = 0; i < markerData.length; i++) {
        priceList.push([i, markerData[i].drinks[0][1]])
      }
      priceList.sort(function (a, b) {
        return (a[1] - b[1])
      })
      eraseshopsWraper()
      for (let i = 0; i < priceList.length; i++) {
        $("#shops_wraper").append(list[priceList[i][0]])
      }
    }

    function sortByDistance() {
      eraseshopsWraper()
      for (let i = 0; i < list.length; i++) {
        $("#shops_wraper").append(list[i])
      }
    }

    window.onresize = function () {
      if (menuSidebar.style.display == "block") {
        if (window.matchMedia("(max-width: 779px)").matches) {
          mapWindow.style.height = "50%";
          mapWindow.style.width = "100%";
        } else {
          mapWindow.style.width = "70%";
          mapWindow.style.height = "100%";
        }
      }
    };
  </script>
  <script src="https://maps.googleapis.com/maps/api/js?key=<%= ENV['API_KEY'] %>&callback=initMap"></script>
</body>

</html>