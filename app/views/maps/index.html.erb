<!DOCTYPE html
  PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html>

<head>
  <meta content="text/html; charset=UTF-8" http-equiv="Content-Type" />
  <title>Simple Map</title>
  <link rel="shortcut icon" href="/favicon/favicon.ico" />

  <meta content="initial-scale=1.0" name="viewport" />
  <meta charset="utf-8" />
</head>

<body>
  <header>
    <nav class="navbar fixed-top justify-content-around navbar-dark mx-auto">
      <%= image_tag '/shugo.png', alt: 'shugo icon', id: 'header_icon' %>
      <button type="button" class="hd_btn my-1 my-sm-0" onclick='geolocation()'>現在地</button>
      <button type="button" class="hd_btn my-1 my-sm-0" onclick='getFromCenter()'>この周辺</button>
      <div class="form-inline" name='geocode'>
        <input class="mr-sm-2 bg-light" type="textbox" id="address" placeholder="この地点を検索">
        <input type="button" id="geobutton" class="hd_btn my-2 my-sm-0" value="Search" onclick="codeAddress()">
      </div>
      <div id="accordion" class="accordion-container">
        <div class="accordion-content">
          <div class="dropdown mx-2">
            <button type="button" class="hd_btn my-1 my-sm-0 dropdown-toggle" type="button" data-toggle="dropdown">
              生ビールの種類
            </button>
            <div class="dropdown-menu beer_lists checkbox">
              <form name="beer_form">
                <div class="check_item p-1">
                  <input type="checkbox" name="beer_items" class="dropdown-item my-1" id="check_nama" value="2">
                  <label for="check_nama">全ての生ビール</label>
                </div>
                <div class="check_item p-1">
                  <input type="checkbox" name="beer_items" class="dropdown-item my-1" id="check_bin" value="3">
                  <label for="check_bin">瓶ビール</label>
                </div>
                <div class="check_item p-1">
                  <input type="checkbox" name="beer_items" class="dropdown-item my-1" id="check_asahi" value="4">
                  <label for="check_asahi">スーパードライ<br>(アサヒ系)</label>
                </div>
                <div class="check_item p-1">
                  <input type="checkbox" name="beer_items" class="dropdown-item my-1" id="check_kirin" value="5">
                  <label for="check_kirin">一番搾り<br>(キリン系)</label>
                </div>
                <div class="check_item p-1">
                  <input type="checkbox" name="beer_items" class="dropdown-item my-1" id="check_sapporo" value="6">
                  <label for="check_sapporo">黒ラベル<br>(サッポロ系)</label>
                </div>
                <div class="check_item p-1">
                  <input type="checkbox" name="beer_items" class="dropdown-item my-1" id="check_suntory" value="7">
                  <label for="check_suntory">プレミアムモルツ<br>(サントリー系)</label>
                </div>
                <div class="check_item p-1">
                  <input type="checkbox" name="beer_items" class="dropdown-item my-1" id="check_ebisu" value="8">
                  <label for="check_ebisu">ヱビス</label>
                </div>
              </form>
            </div>
          </div>
          <div class="selectbox sel_num mx-2">
            <select name="件数" id="select_num">
              <option value="20" hidden>取得件数</option>
              <option value="20">20件</option>
              <option value="40">40件</option>
              <option value="60">60件</option>
            </select>
          </div>
        </div>
        <div class="accordion-title">
          <i class="far fa-arrow-alt-circle-down"></i>
          <span class="accordion_span">詳細設定</span>
        </div>
      </div>

    </nav>
  </header>

  <main>
    <div id="wrap">
      <div id="map"></div>
      <div id="menu">
        <div class="toggle-buttons">
          <input id="item-1" class="radio-inline__input" type="radio" name="accessible-radio" value="item-1"
            checked="checked" onclick="sortByDistance()" />
          <label class="radio-inline__label" for="item-1">
            近い順
          </label>
          <input id="item-2" class="radio-inline__input" type="radio" name="accessible-radio" value="item-2"
            onclick="sortByPrice()" />
          <label class="radio-inline__label" for="item-2">
            安い順
          </label>
        </div>
        <div id="shops_wraper"></div>
        <div class="menu_footer footer_smartphone">
          <p class="footer_message">実際の場所、商品、値段と違う場合がございます。</p>
        </div>
      </div>
    </div>
    <div class="menu_footer footer_pc">
      <p class="footer_message">実際の場所、商品、値段と違う場合がございます。</p>
    </div>
  </main>
  <script>
    let map
    let geocoder
    let marker = []
    let infoWindow = []
    let markerData
    let markerNum = null
    let markerLocation = null
    let mapOptions = {}
    let list = []
    let genre_array = []
    let shopNum = null
    let mapWindow = document.getElementById('map')
    let menuSidebar = document.getElementById('menu')
    let shopsWraper = document.getElementById('shops_wraper')

    function initMap() {
      geocoder = new google.maps.Geocoder()

      mapOptions = {
        disableDefaultUI: true,
        zoom: 17, // 拡大倍率
        center: {
          lat: 35.7299504,
          lng: 139.7000289,
        } // 緯度・経度
      };

      map = new google.maps.Map(
        mapWindow,
        mapOptions
      );
    }

    function showMenu() {
      if (window.matchMedia("(max-width: 767px)").matches) {
        mapWindow.style.height = '50%';
      } else {
        mapWindow.style.width = '70%'
      }
      menuSidebar.style.display = 'block';
    }

    function getDrinkGenres() {
      let genreElement = document.beer_form.beer_items
      genre_array = []
      for (let i = 0; i < genreElement.length; i++) {
        if (genreElement[i].checked) {
          genre_array.push(parseInt(genreElement[i].value));
        }
      }
      console.log(genre_array)
    }

    function getShopNum() {
      let shopElement = document.getElementById("select_num")
      shopNum = shopElement.value
      console.log(shopNum)
    }

    function eraseshopsWraper() {
      if (document.getElementsByClassName('shop_list').length > 0) {
        console.log(shopsWraper)
        while (shopsWraper.firstChild) shopsWraper.removeChild(shopsWraper.firstChild);
      }
    }

    function fetchApi(lat, lng) {
      getDrinkGenres()
      let drinkGenres
      if (genre_array.length === 0) {
        drinkGenres = [2]
      } else {
        drinkGenres = genre_array
      }
      getShopNum()
      console.log(genre_array)
      console.log(drinkGenres)
      console.log(shopNum)

      let prm = {
        now_lat: lat,
        now_lng: lng,
        genre_array: drinkGenres,
        shop_num: shopNum
      };

      fetch('/fetch_shops', {
        method: "POST",
        body: JSON.stringify(prm),
        headers: {
          'Content-Type': 'application/json'
        }
      }).then(function (response) {
        return response.json()
      }).then(function (shops) {
        showMenu()
        markerData = shops
        deleteMarkers(markerNum)
        dropMarker(markerData)
      }).catch(function (ex) {
        console.log('parsing failed', ex)
      })
    }

    function dropMarker(markerData) {
      eraseshopsWraper()
      for (let i = 0; i < Object.keys(markerData).length; i++) {
        markerLatLng = new google.maps.LatLng({
          lat: parseFloat(markerData[i].shop_lat),
          lng: parseFloat(markerData[i].shop_lng)
        });
        let shopDom = ''
        let drinkDom = ''
        let distanceDom = ''
        let addressDom = ''
        let listDom = ''

        shopDom =
          `<div class="info_window"><a href="https://www.hotpepper.jp${markerData[i].shop_url}" target="_blank"> ${markerData[i].shop_name} </a></div>`

        for (let v = 0; v < markerData[i].drinks.length; v++) {
          drinkDom = drinkDom + `<div class="info_window"><a href="https://www.hotpepper.jp${markerData[i].shop_url}drink/"
              target="_blank"> ${markerData[i].drinks[v][0]}: ${markerData[i].drinks[v][1]}円 </a></div>`
        }

        if (markerData[i].distance < 1) {
          let distanceForMetre = markerData[i].distance * 100
          distanceForMetre = Math.round(distanceForMetre) * 10
          distanceDom = `<div class="info_window"><a href="http://maps.apple.com/?q=${markerData[i].shop_lat},${markerData[i].shop_lng}">
              ${distanceForMetre}m </a></div>`
        } else {
          let distanceForKilo = markerData[i].distance * 10
          distanceForKilo = Math.round(distanceForKilo) / 10
          distanceDom = `<div class="info_window"><a href="http://maps.apple.com/?q=${markerData[i].shop_lat},${markerData[i].shop_lng}">
              ${distanceForKilo}km </a></div>`
        }
        listDom = `<div id="list${i}" class='shop_container'><li class=' shop_list'> ${shopDom} ${drinkDom} ${addressDom} ${distanceDom}
          </li>
        </div>`
        console.log(listDom)
        marker[i] = new google.maps.Marker({ // マーカーの追加
          position: markerLatLng, // マーカーを立てる位置を指定
          animation: google.maps.Animation.DROP,
          map: map, // マーカーを立てる地図を指定
          icon: 'beer.png'
        });
        infoWindow[i] = new google.maps.InfoWindow({
          content: shopDom + drinkDom + distanceDom
        });
        $("#shops_wraper").append(listDom)
        list[i] = document.getElementById(`list${i}`)

        markerEvent(i);
        listEvent(i);
        markerNum = i
      }
      console.log('otosita')
    }

    function markerEvent(i) {
      marker[i].addListener('click', function () {
        markerLatLng = new google.maps.LatLng({
          lat: parseFloat(markerData[i].shop_lat),
          lng: parseFloat(markerData[i].shop_lng)
        });
        map.setCenter(markerLatLng)
        infoWindow[i].open(map, marker[i]);
      });
    }

    function listEvent(i) {
      console.log[i]
      list[i].addEventListener('click', function () {
        markerLatLng = new google.maps.LatLng({
          lat: parseFloat(markerData[i].shop_lat),
          lng: parseFloat(markerData[i].shop_lng)
        });
        map.setCenter(markerLatLng)
        infoWindow[i].open(map, marker[i]);
      })
    }

    function deleteMarkers(markerNum) {
      if (markerNum != null)
        for (let i = 0; i <= markerNum; i++) {
          if (marker[i] != null) marker[i].setMap(null);
        }
      marker = [];
    }

    function deleteMarkerLocation() {
      if (markerLocation != null) markerLocation.setMap(null);
      markerLocation = null;
    }

    function geolocation() {
      if (navigator.geolocation) {
        // 現在地を取得
        navigator.geolocation.getCurrentPosition(
          // 取得成功した場合
          function (position) {
            // 緯度・経度を変数に格納
            let mapLocation = new google.maps.LatLng(position.coords.latitude, position.coords.longitude);
            map.setCenter(mapLocation)
            deleteMarkerLocation()
            deleteMarkers(markerNum)
            fetchApi(position.coords.latitude, position.coords.longitude)


            markerLocation = new google.maps.Marker({
              map: map,
              animation: google.maps.Animation.DROP,
              position: mapLocation
            });
          },
          // 取得失敗した場合
          function (error) {
            // エラーメッセージを表示
            switch (error.code) {
              case 1: // PERMISSION_DENIED
                alert("位置情報の利用が許可されていません");
                break;
              case 2: // POSITION_UNAVAILABLE
                alert("現在位置が取得できませんでした");
                break;
              case 3: // TIMEOUT
                alert("タイムアウトになりました");
                break;
              default:
                alert("その他のエラー(エラーコード:" + error.code + ")");
                break;
            }
          }
        );
      } else {
        alert("この端末では位置情報が取得できません");
      }
    }

    function codeAddress() {
      let inputAddress = document.getElementById('address').value;
      geocoder.geocode({
          'address': inputAddress
        },
        function (results, status) {
          if (status == 'OK') {
            deleteMarkerLocation()
            deleteMarkers(markerNum)
            let mapLocation = results[0].geometry.location
            map.setCenter(mapLocation);
            markerLocation = new google.maps.Marker({
              map: map,
              animation: google.maps.Animation.DROP,
              position: mapLocation
            });
            fetchApi(results[0].geometry.location.lat(), results[0].geometry.location.lng())

          } else {
            alert('Geocode was not successful for the following reason: ' + status);
          }
        });
    }

    function getFromCenter() {
      let latlng = map.getCenter()
      deleteMarkerLocation()
      deleteMarkers(markerNum)
      markerLocation = new google.maps.Marker({
        map: map,
        animation: google.maps.Animation.DROP,
        position: latlng
      });
      fetchApi(latlng.lat(), latlng.lng(), )
    }

    function sortByPrice() {
      let priceList = []
      for (let i = 0; i < markerData.length; i++) {
        priceList.push([i, markerData[i].drinks[0][1]])
      }
      console.log(priceList)
      priceList.sort(function (a, b) {
        return (a[1] - b[1])
      })
      eraseshopsWraper()
      for (let i = 0; i < priceList.length; i++) {
        $("#shops_wraper").append(list[priceList[i][0]])
      }
    }

    function sortByDistance() {
      eraseshopsWraper()
      for (let i = 0; i < list.length; i++) {
        $("#shops_wraper").append(list[i])
      }
    }

    $("#address").keypress(function (e) {
      if (e.which == 13) {
        $("#geobutton").click();
      }
    });
  </script>
  <script src="https://maps.googleapis.com/maps/api/js?key=<%= ENV['API_KEY'] %>&callback=initMap"></script>
</body>

</html>