<!DOCTYPE html
  PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html>

<head>
  <meta content="text/html; charset=UTF-8" http-equiv="Content-Type" />
  <title>Simple Map</title>
  <meta content="initial-scale=1.0" name="viewport" />
  <meta charset="utf-8" />
</head>

<body>
  <header>
    <nav class="navbar fixed-top justify-content-around navbar-dark mx-auto">
      <button class="hd_btn my-2 my-sm-0" onclick='geolocation()'>現在地</button>
      <button class="hd_btn my-2 my-sm-0" onclick='fetchApi()'>テスト</button>
      <div class="form-inline" name='geocode'>
        <input class="mr-sm-2 bg-light" type="textbox" id="address" placeholder="この地点を検索">
        <input type="button" id="geobutton" class="hd_btn my-2 my-sm-0" value="Search" onclick="codeAddress()">
      </div>
    </nav>
  </header>
  <main>
    <div id="map"></div>
  </main>
  <script>
    var map
    var geocoder
    var marker = null;
    var markerData

    function initMap() {
      geocoder = new google.maps.Geocoder()

      var mapOptions = {
        disableDefaultUI: true,
        zoom: 17, // 拡大倍率
        center: {
          lat: 35.7299504,
          lng: 139.7000289
        } // 緯度・経度
      };

      map = new google.maps.Map(
        document.getElementById('map'),
        mapOptions
      );
    }

    function fetchApi(lat, lng, shop_num = 20, genre_array) {
      var prm = {
        now_lat: lat,
        now_lng: lng,
        shop_num: shop_num,
        genre_array: genre_array
      };

      fetch('/fetch_test', {
        method: "POST",
        body: JSON.stringify(prm),
        headers: {
          'Content-Type': 'application/json'
        }
      }).then(function (response) {
        return response.json()
      }).then(function (shops) {
        markerData = shops
        dropMarker(markerData)
        console.log(markerData[1].shop_lat)
        console.log(shops)
        // console.log('parsed json', shops)
        // console.log(shops[0].distance)
        // console.log(Object.keys(shops).length)
      }).catch(function (ex) {
        console.log('parsing failed', ex)
      })
    }

    function dropMarker(markerData) {
      console.log('otosimasu')
      for (var i = 0; i < Object.keys(markerData); i++) {
        markerLatLng = new google.maps.LatLng({lat: markerData[i].shop_lat, lng: markerData[i].shop_lng});
        console.log(markerData[1].shop_lat)
        console.log(i)
        marker[i] = new google.maps.Marker({
          position: markerLatLng,
          map: map
        });
        infoWindow[i] = new google.maps.InfoWindow({
          content: '<div class="map">' + markerData[i].shop_name + '</div>'
        });
        markerEvent(i);
      }
      console.log('otosita')
    }

    function markerEvent(i) {
      marker[i].addListener('click', function() {
        infoWindow[i].open(map, marker[i]);
      });
    }

    function deleteMarker() {
      if (marker != null) marker.setMap(null);
      marker = null;
    }

    function geolocation() {
      if (navigator.geolocation) {
        // 現在地を取得
        navigator.geolocation.getCurrentPosition(
          // 取得成功した場合
          function (position) {
            // 緯度・経度を変数に格納
            var mapLatLng = new google.maps.LatLng(position.coords.latitude, position.coords.longitude);
            console.log(position.coords.latitude)
            console.log(position.coords.longitude)
            map.setCenter(mapLatLng)
            deleteMarker()

            fetchApi(position.coords.latitude, position.coords.longitude)


            marker = new google.maps.Marker({
              map: map,
              position: mapLatLng
            });
          },
          // 取得失敗した場合
          function (error) {
            // エラーメッセージを表示
            switch (error.code) {
              case 1: // PERMISSION_DENIED
                alert("位置情報の利用が許可されていません");
                break;
              case 2: // POSITION_UNAVAILABLE
                alert("現在位置が取得できませんでした");
                break;
              case 3: // TIMEOUT
                alert("タイムアウトになりました");
                break;
              default:
                alert("その他のエラー(エラーコード:" + error.code + ")");
                break;
            }
          }
        );
      } else {
        alert("この端末では位置情報が取得できません");
      }
    }

    function codeAddress() {
      let inputAddress = document.getElementById('address').value;
      geocoder.geocode({
          'address': inputAddress
        },
        function (results, status) {
          if (status == 'OK') {
            deleteMarker()
            // marker.setMap(null);
            var mapLocation = results[0].geometry.location
            map.setCenter(mapLocation);
            fetchApi(results[0].geometry.location.lat(), results[0].geometry.location.lng())

            // marker = new google.maps.Marker({
            //   map: map,
            //   position: mapLocation
            // });
          } else {
            alert('Geocode was not successful for the following reason: ' + status);
          }
        });
    }

    $("#address").keypress(function (e) {
      if (e.which == 13) {
        $("#geobutton").click();
      }
    });
  </script>
  <script src="https://maps.googleapis.com/maps/api/js?key=<%= ENV['API_KEY'] %>&callback=initMap"></script>
</body>

</html>